// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PositionsService.Data;

#nullable disable

namespace PositionsService.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("PositionsService.Models.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("TEXT");

                    b.HasKey("DepartmentID");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentID = 1,
                            DepartmentName = "HR"
                        },
                        new
                        {
                            DepartmentID = 2,
                            DepartmentName = "IT"
                        },
                        new
                        {
                            DepartmentID = 3,
                            DepartmentName = "Sales"
                        });
                });

            modelBuilder.Entity("PositionsService.Models.Position", b =>
                {
                    b.Property<int>("PositionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Budget")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("DepartmentID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PositionNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PositionStatusID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecruiterID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PositionID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("PositionNumber")
                        .IsUnique();

                    b.HasIndex("PositionStatusID");

                    b.HasIndex("RecruiterID");

                    b.ToTable("Positions", t =>
                        {
                            t.HasCheckConstraint("CK_Position_Budget", "[Budget] >= 0");
                        });
                });

            modelBuilder.Entity("PositionsService.Models.PositionStatus", b =>
                {
                    b.Property<int>("PositionStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PositionStatusID");

                    b.ToTable("PositionStatuses");

                    b.HasData(
                        new
                        {
                            PositionStatusID = 1,
                            StatusName = "Active"
                        },
                        new
                        {
                            PositionStatusID = 2,
                            StatusName = "Inactive"
                        },
                        new
                        {
                            PositionStatusID = 3,
                            StatusName = "Closed"
                        });
                });

            modelBuilder.Entity("PositionsService.Models.Recruiter", b =>
                {
                    b.Property<int>("RecruiterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RecruiterName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RecruiterID");

                    b.ToTable("Recruiters");

                    b.HasData(
                        new
                        {
                            RecruiterID = 1,
                            RecruiterName = "Pancho Villa"
                        },
                        new
                        {
                            RecruiterID = 2,
                            RecruiterName = "Juan Ramirez"
                        },
                        new
                        {
                            RecruiterID = 3,
                            RecruiterName = "Federico Alvarez"
                        });
                });

            modelBuilder.Entity("PositionsService.Models.Position", b =>
                {
                    b.HasOne("PositionsService.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PositionsService.Models.PositionStatus", "Status")
                        .WithMany()
                        .HasForeignKey("PositionStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PositionsService.Models.Recruiter", "Recruiter")
                        .WithMany()
                        .HasForeignKey("RecruiterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Recruiter");

                    b.Navigation("Status");
                });
#pragma warning restore 612, 618
        }
    }
}
